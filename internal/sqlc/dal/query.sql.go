// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package dal

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteStateToken = `-- name: DeleteStateToken :exec
delete from demo.state_token
where token = $1
`

func (q *Queries) DeleteStateToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteStateToken, token)
	return err
}

const getStateToken = `-- name: GetStateToken :one
select token, created_at, updated_at
from demo.state_token
where token = $1
`

func (q *Queries) GetStateToken(ctx context.Context, token string) (DemoStateToken, error) {
	row := q.db.QueryRow(ctx, getStateToken, token)
	var i DemoStateToken
	err := row.Scan(&i.Token, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getUser = `-- name: GetUser :one
select id, email, created_at, updated_at
from demo."user"
where id = $1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (DemoUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i DemoUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertStateToken = `-- name: InsertStateToken :exec
insert into demo.state_token (token)
values ($1)
`

func (q *Queries) InsertStateToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, insertStateToken, token)
	return err
}
